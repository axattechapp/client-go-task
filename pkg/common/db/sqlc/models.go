// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package db_sqlc

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type UserRole string

const (
	UserRoleJobseeker UserRole = "jobseeker"
	UserRoleAdmin     UserRole = "admin"
	UserRoleRecruiter UserRole = "recruiter"
)

func (e *UserRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserRole(s)
	case string:
		*e = UserRole(s)
	default:
		return fmt.Errorf("unsupported scan type for UserRole: %T", src)
	}
	return nil
}

type NullUserRole struct {
	UserRole UserRole `json:"user_role"`
	Valid    bool     `json:"valid"` // Valid is true if UserRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserRole) Scan(value interface{}) error {
	if value == nil {
		ns.UserRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserRole), nil
}

type Career struct {
	ID          int32       `json:"id"`
	UserID      int32       `json:"user_id"`
	Title       string      `json:"title"`
	Company     pgtype.Text `json:"company"`
	Description pgtype.Text `json:"description"`
	SkillID     int32       `json:"skill_id"`
}

type Profile struct {
	ID          int32       `json:"id"`
	UserID      int32       `json:"user_id"`
	Bio         pgtype.Text `json:"bio"`
	Company     pgtype.Text `json:"company"`
	JobRole     string      `json:"job_role"`
	Description pgtype.Text `json:"description"`
}

type ProfileSkill struct {
	ID      int32 `json:"id"`
	UserID  int32 `json:"user_id"`
	SkillID int32 `json:"skill_id"`
}

type Skill struct {
	ID   int32  `json:"id"`
	Name string `json:"name"`
}

type User struct {
	ID           int32            `json:"id"`
	FullName     string           `json:"full_name"`
	Email        string           `json:"email"`
	PasswordHash string           `json:"password_hash"`
	UserType     UserRole         `json:"user_type"`
	AvatarUrl    pgtype.Text      `json:"avatar_url"`
	CreatedAt    pgtype.Timestamp `json:"created_at"`
}
