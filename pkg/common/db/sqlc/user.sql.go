// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user.sql

package db_sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addSkillToUser = `-- name: AddSkillToUser :exec

INSERT INTO profile_skills (user_id, skill_id) VALUES ($1, $2)
`

type AddSkillToUserParams struct {
	UserID  int32 `json:"user_id"`
	SkillID int32 `json:"skill_id"`
}

// --------- user skills ----------
func (q *Queries) AddSkillToUser(ctx context.Context, arg AddSkillToUserParams) error {
	_, err := q.db.Exec(ctx, addSkillToUser, arg.UserID, arg.SkillID)
	return err
}

const createCareer = `-- name: CreateCareer :one
INSERT INTO careers (user_id, title, company, description, skill_id)
VALUES ($1, $2, $3, $4, $5) RETURNING id, user_id, title, company, description, skill_id
`

type CreateCareerParams struct {
	UserID      int32       `json:"user_id"`
	Title       string      `json:"title"`
	Company     pgtype.Text `json:"company"`
	Description pgtype.Text `json:"description"`
	SkillID     int32       `json:"skill_id"`
}

func (q *Queries) CreateCareer(ctx context.Context, arg CreateCareerParams) (Career, error) {
	row := q.db.QueryRow(ctx, createCareer,
		arg.UserID,
		arg.Title,
		arg.Company,
		arg.Description,
		arg.SkillID,
	)
	var i Career
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Company,
		&i.Description,
		&i.SkillID,
	)
	return i, err
}

const createProfile = `-- name: CreateProfile :one
INSERT INTO profiles (user_id, bio, company, job_role, description)
VALUES ($1, $2, $3, $4, $5) RETURNING id, user_id, bio, company, job_role, description
`

type CreateProfileParams struct {
	UserID      int32       `json:"user_id"`
	Bio         pgtype.Text `json:"bio"`
	Company     pgtype.Text `json:"company"`
	JobRole     string      `json:"job_role"`
	Description pgtype.Text `json:"description"`
}

func (q *Queries) CreateProfile(ctx context.Context, arg CreateProfileParams) (Profile, error) {
	row := q.db.QueryRow(ctx, createProfile,
		arg.UserID,
		arg.Bio,
		arg.Company,
		arg.JobRole,
		arg.Description,
	)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Bio,
		&i.Company,
		&i.JobRole,
		&i.Description,
	)
	return i, err
}

const createSkill = `-- name: CreateSkill :one
INSERT INTO skills (name) VALUES (LOWER($1)) RETURNING id, name
`

func (q *Queries) CreateSkill(ctx context.Context, lower string) (Skill, error) {
	row := q.db.QueryRow(ctx, createSkill, lower)
	var i Skill
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (full_name, email, password_hash, user_type, avatar_url)
VALUES ($1, $2, $3, $4, $5) RETURNING id, full_name, email, password_hash, user_type, avatar_url, created_at
`

type CreateUserParams struct {
	FullName     string      `json:"full_name"`
	Email        string      `json:"email"`
	PasswordHash string      `json:"password_hash"`
	UserType     UserRole    `json:"user_type"`
	AvatarUrl    pgtype.Text `json:"avatar_url"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.FullName,
		arg.Email,
		arg.PasswordHash,
		arg.UserType,
		arg.AvatarUrl,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Email,
		&i.PasswordHash,
		&i.UserType,
		&i.AvatarUrl,
		&i.CreatedAt,
	)
	return i, err
}

const deleteCareerByID = `-- name: DeleteCareerByID :exec
DELETE FROM careers WHERE id = $1
`

func (q *Queries) DeleteCareerByID(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteCareerByID, id)
	return err
}

const deleteProfileByID = `-- name: DeleteProfileByID :exec
DELETE FROM profiles WHERE id = $1
`

func (q *Queries) DeleteProfileByID(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteProfileByID, id)
	return err
}

const deleteProfileByUserID = `-- name: DeleteProfileByUserID :exec
DELETE FROM profiles WHERE user_id = $1
`

func (q *Queries) DeleteProfileByUserID(ctx context.Context, userID int32) error {
	_, err := q.db.Exec(ctx, deleteProfileByUserID, userID)
	return err
}

const deleteSkillByID = `-- name: DeleteSkillByID :exec
DELETE FROM skills WHERE id = $1
`

func (q *Queries) DeleteSkillByID(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteSkillByID, id)
	return err
}

const deleteUserByID = `-- name: DeleteUserByID :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUserByID(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteUserByID, id)
	return err
}

const getAllCareers = `-- name: GetAllCareers :many
SELECT id, user_id, title, company, description, skill_id FROM careers
`

// ----- career ------------------------
func (q *Queries) GetAllCareers(ctx context.Context) ([]Career, error) {
	rows, err := q.db.Query(ctx, getAllCareers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Career
	for rows.Next() {
		var i Career
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Company,
			&i.Description,
			&i.SkillID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllProfile = `-- name: GetAllProfile :many
SELECT id, user_id, bio, company, job_role, description FROM profiles
`

// ------ profile --------------
func (q *Queries) GetAllProfile(ctx context.Context) ([]Profile, error) {
	rows, err := q.db.Query(ctx, getAllProfile)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Profile
	for rows.Next() {
		var i Profile
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Bio,
			&i.Company,
			&i.JobRole,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllUserBySkillsName = `-- name: GetAllUserBySkillsName :many
SELECT u.id, u.full_name, u.email, u.password_hash, u.user_type, u.avatar_url, u.created_at
FROM users u
INNER JOIN profile_skills ps ON u.id = ps.user_id
INNER JOIN skills s ON ps.skill_id = s.id
WHERE s.name ILIKE $1
`

func (q *Queries) GetAllUserBySkillsName(ctx context.Context, name string) ([]User, error) {
	rows, err := q.db.Query(ctx, getAllUserBySkillsName, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.FullName,
			&i.Email,
			&i.PasswordHash,
			&i.UserType,
			&i.AvatarUrl,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllUserSkillsByUserID = `-- name: GetAllUserSkillsByUserID :many
SELECT id, user_id, skill_id FROM profile_skills WHERE user_id = $1
`

func (q *Queries) GetAllUserSkillsByUserID(ctx context.Context, userID int32) ([]ProfileSkill, error) {
	rows, err := q.db.Query(ctx, getAllUserSkillsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProfileSkill
	for rows.Next() {
		var i ProfileSkill
		if err := rows.Scan(&i.ID, &i.UserID, &i.SkillID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT id, full_name, email, password_hash, user_type, avatar_url, created_at FROM users
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.FullName,
			&i.Email,
			&i.PasswordHash,
			&i.UserType,
			&i.AvatarUrl,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllskills = `-- name: GetAllskills :many

SELECT id, name FROM skills
`

// --------- skill --------------------
func (q *Queries) GetAllskills(ctx context.Context) ([]Skill, error) {
	rows, err := q.db.Query(ctx, getAllskills)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Skill
	for rows.Next() {
		var i Skill
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCareerByID = `-- name: GetCareerByID :one
SELECT id, user_id, title, company, description, skill_id FROM careers WHERE id = $1
`

func (q *Queries) GetCareerByID(ctx context.Context, id int32) (Career, error) {
	row := q.db.QueryRow(ctx, getCareerByID, id)
	var i Career
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Company,
		&i.Description,
		&i.SkillID,
	)
	return i, err
}

const getCareersByUserID = `-- name: GetCareersByUserID :many
SELECT id, user_id, title, company, description, skill_id FROM careers WHERE user_id = $1
`

func (q *Queries) GetCareersByUserID(ctx context.Context, userID int32) ([]Career, error) {
	rows, err := q.db.Query(ctx, getCareersByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Career
	for rows.Next() {
		var i Career
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Company,
			&i.Description,
			&i.SkillID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProfileByID = `-- name: GetProfileByID :one
SELECT id, user_id, bio, company, job_role, description FROM profiles WHERE id = $1
`

func (q *Queries) GetProfileByID(ctx context.Context, id int32) (Profile, error) {
	row := q.db.QueryRow(ctx, getProfileByID, id)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Bio,
		&i.Company,
		&i.JobRole,
		&i.Description,
	)
	return i, err
}

const getProfileByUserID = `-- name: GetProfileByUserID :one
SELECT id, user_id, bio, company, job_role, description FROM profiles WHERE user_id = $1
`

func (q *Queries) GetProfileByUserID(ctx context.Context, userID int32) (Profile, error) {
	row := q.db.QueryRow(ctx, getProfileByUserID, userID)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Bio,
		&i.Company,
		&i.JobRole,
		&i.Description,
	)
	return i, err
}

const getSkillByID = `-- name: GetSkillByID :one
SELECT id, name FROM skills WHERE id = $1
`

func (q *Queries) GetSkillByID(ctx context.Context, id int32) (Skill, error) {
	row := q.db.QueryRow(ctx, getSkillByID, id)
	var i Skill
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getSkillByName = `-- name: GetSkillByName :one
SELECT id, name FROM skills WHERE name ILIKE $1
`

func (q *Queries) GetSkillByName(ctx context.Context, name string) (Skill, error) {
	row := q.db.QueryRow(ctx, getSkillByName, name)
	var i Skill
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, full_name, email, password_hash, user_type, avatar_url, created_at FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Email,
		&i.PasswordHash,
		&i.UserType,
		&i.AvatarUrl,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, full_name, email, password_hash, user_type, avatar_url, created_at FROM users WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Email,
		&i.PasswordHash,
		&i.UserType,
		&i.AvatarUrl,
		&i.CreatedAt,
	)
	return i, err
}

const getUserSkillsByUserIDAndSkillId = `-- name: GetUserSkillsByUserIDAndSkillId :one
SELECT id, user_id, skill_id FROM profile_skills WHERE user_id = $1 AND skill_id= $2
`

type GetUserSkillsByUserIDAndSkillIdParams struct {
	UserID  int32 `json:"user_id"`
	SkillID int32 `json:"skill_id"`
}

func (q *Queries) GetUserSkillsByUserIDAndSkillId(ctx context.Context, arg GetUserSkillsByUserIDAndSkillIdParams) (ProfileSkill, error) {
	row := q.db.QueryRow(ctx, getUserSkillsByUserIDAndSkillId, arg.UserID, arg.SkillID)
	var i ProfileSkill
	err := row.Scan(&i.ID, &i.UserID, &i.SkillID)
	return i, err
}

const getUsersByEmail = `-- name: GetUsersByEmail :many
SELECT id, full_name, email, password_hash, user_type, avatar_url, created_at FROM users WHERE email = $1
`

func (q *Queries) GetUsersByEmail(ctx context.Context, email string) ([]User, error) {
	rows, err := q.db.Query(ctx, getUsersByEmail, email)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.FullName,
			&i.Email,
			&i.PasswordHash,
			&i.UserType,
			&i.AvatarUrl,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersByEmailAndUserType = `-- name: GetUsersByEmailAndUserType :many
SELECT id, full_name, email, password_hash, user_type, avatar_url, created_at FROM users WHERE email = $1 AND user_type = $2
`

type GetUsersByEmailAndUserTypeParams struct {
	Email    string   `json:"email"`
	UserType UserRole `json:"user_type"`
}

func (q *Queries) GetUsersByEmailAndUserType(ctx context.Context, arg GetUsersByEmailAndUserTypeParams) ([]User, error) {
	rows, err := q.db.Query(ctx, getUsersByEmailAndUserType, arg.Email, arg.UserType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.FullName,
			&i.Email,
			&i.PasswordHash,
			&i.UserType,
			&i.AvatarUrl,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersByUserType = `-- name: GetUsersByUserType :many
SELECT id, full_name, email, password_hash, user_type, avatar_url, created_at FROM users WHERE user_type = $1
`

func (q *Queries) GetUsersByUserType(ctx context.Context, userType UserRole) ([]User, error) {
	rows, err := q.db.Query(ctx, getUsersByUserType, userType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.FullName,
			&i.Email,
			&i.PasswordHash,
			&i.UserType,
			&i.AvatarUrl,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCareer = `-- name: UpdateCareer :one
UPDATE careers
SET title = $2,
  company = $3,
  description = $4,
  skill_id = $5
WHERE id = $1
RETURNING id, user_id, title, company, description, skill_id
`

type UpdateCareerParams struct {
	ID          int32       `json:"id"`
	Title       string      `json:"title"`
	Company     pgtype.Text `json:"company"`
	Description pgtype.Text `json:"description"`
	SkillID     int32       `json:"skill_id"`
}

func (q *Queries) UpdateCareer(ctx context.Context, arg UpdateCareerParams) (Career, error) {
	row := q.db.QueryRow(ctx, updateCareer,
		arg.ID,
		arg.Title,
		arg.Company,
		arg.Description,
		arg.SkillID,
	)
	var i Career
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Company,
		&i.Description,
		&i.SkillID,
	)
	return i, err
}

const updateProfile = `-- name: UpdateProfile :one
UPDATE profiles
SET bio = $2,
  company = $3,
  job_role = $4,
  description = $5
WHERE id = $1
RETURNING id, user_id, bio, company, job_role, description
`

type UpdateProfileParams struct {
	ID          int32       `json:"id"`
	Bio         pgtype.Text `json:"bio"`
	Company     pgtype.Text `json:"company"`
	JobRole     string      `json:"job_role"`
	Description pgtype.Text `json:"description"`
}

func (q *Queries) UpdateProfile(ctx context.Context, arg UpdateProfileParams) (Profile, error) {
	row := q.db.QueryRow(ctx, updateProfile,
		arg.ID,
		arg.Bio,
		arg.Company,
		arg.JobRole,
		arg.Description,
	)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Bio,
		&i.Company,
		&i.JobRole,
		&i.Description,
	)
	return i, err
}

const updateSkill = `-- name: UpdateSkill :one
UPDATE skills
SET name = LOWER($2)
WHERE id = $1
RETURNING id, name
`

type UpdateSkillParams struct {
	ID    int32  `json:"id"`
	Lower string `json:"lower"`
}

func (q *Queries) UpdateSkill(ctx context.Context, arg UpdateSkillParams) (Skill, error) {
	row := q.db.QueryRow(ctx, updateSkill, arg.ID, arg.Lower)
	var i Skill
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET full_name = $2,
  password_hash = $3,
  avatar_url = $4
WHERE id = $1
RETURNING id, full_name, email, password_hash, user_type, avatar_url, created_at
`

type UpdateUserParams struct {
	ID           int32       `json:"id"`
	FullName     string      `json:"full_name"`
	PasswordHash string      `json:"password_hash"`
	AvatarUrl    pgtype.Text `json:"avatar_url"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.FullName,
		arg.PasswordHash,
		arg.AvatarUrl,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Email,
		&i.PasswordHash,
		&i.UserType,
		&i.AvatarUrl,
		&i.CreatedAt,
	)
	return i, err
}
